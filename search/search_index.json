{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe0 Welcome to My Homelab Docs","text":"<p>Welcome! This site documents the architecture, setup, and services running in my homelab. It's built with MkDocs and styled using the Material for MkDocs theme.</p>"},{"location":"#sections","title":"\ud83d\udd27 Sections","text":"<ul> <li>Infrastructure \u2013 Learn how Proxmox is configured</li> <li>Services \u2013 Notes on Pi-hole, DNS, NGINX, and more</li> <li>Monitoring \u2013 Grafana and system health setup</li> <li>Guides \u2013 How-tos and tutorials for common tasks</li> </ul> <p>\ud83d\udea7 This site is a work in progress. Expect frequent updates.</p>"},{"location":"#repository","title":"\ud83d\udcc1 Repository","text":"<p>\ud83d\udd17 View on GitHub</p>"},{"location":"guides/mkdocs_deploy_guide/","title":"Deploying MkDocs with Material Theme","text":"<p>This guide explains how to deploy a professional, searchable documentation site using MkDocs with the Material theme, hosted on GitHub Pages. It is intended for use directly on <code>pve1</code> or your local development system.</p>"},{"location":"guides/mkdocs_deploy_guide/#requirements","title":"Requirements","text":"<ul> <li>Python 3</li> <li>pip</li> <li>A GitHub repo: https://github.com/Tylerwkoontz/homelab-docs</li> </ul>"},{"location":"guides/mkdocs_deploy_guide/#step-1-install-mkdocs-and-material-theme","title":"Step 1: Install MkDocs and Material Theme","text":"<p>Due to recent Debian/Ubuntu changes, system-wide pip installs are blocked to protect the OS. We\u2019ll use a Python virtual environment to install MkDocs cleanly.</p>"},{"location":"guides/mkdocs_deploy_guide/#1-prepare-python-environment","title":"1. Prepare Python Environment","text":"<p>Install the required packages: <pre><code>sudo apt update\nsudo apt install python3-full python3-venv python3.11-venv -y\n</code></pre></p> <p><code>python3-venv</code> and <code>python3.11-venv</code> provide the tools needed for creating Python virtual environments. <code>python3-full</code> ensures you have all standard Python modules, including <code>ensurepip</code>, required to bootstrap <code>pip</code> inside virtual environments</p>"},{"location":"guides/mkdocs_deploy_guide/#2-create-and-activate-virtual-environment","title":"2. Create and Activate Virtual Environment","text":"<p><pre><code># (Optional) Create a folder to organize all your venvs\nmkdir -p ~/venvs\n\n# Create a virtual environment specifically for MkDocs\npython3 -m venv ~/venvs/mkdocs\n\n# Activate the virtual environment\nsource ~/venvs/mkdocs/bin/activate\n</code></pre> You\u2019ll know it's active when your prompt looks like this: <pre><code>(mkdocs) user@pve1:~$\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#3-install-mkdocs-and-material-theme","title":"3. Install MkDocs and Material Theme","text":"<p>Inside the virtual environment:</p> <p><pre><code>pip install mkdocs mkdocs-material\n</code></pre> Then verify: <pre><code>mkdocs --version\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#reminder","title":"Reminder:","text":"<p>Each time you want to edit or serve your docs:</p> <p><pre><code>source ~/venvs/mkdocs/bin/activate\n</code></pre> To exit:</p> <pre><code>deactivate\n</code></pre>"},{"location":"guides/mkdocs_deploy_guide/#step-2-clone-your-github-repo-on-pve1","title":"Step 2: Clone Your GitHub Repo on pve1","text":"<p>On <code>pve1</code>, download your project repo:</p> <pre><code>mkdir -p ~/Projects &amp;&amp; cd ~/Projects\ngit clone https://github.com/&lt;username&gt;/homelab-docs.git\ncd homelab-docs\n</code></pre>"},{"location":"guides/mkdocs_deploy_guide/#step-3-initialize-or-organize-the-mkdocs-project","title":"Step 3: Initialize or Organize the MkDocs Project","text":"<p>Choose one of the following based on your situation.</p>"},{"location":"guides/mkdocs_deploy_guide/#a-if-you-already-have-a-docs-directory","title":"A) If You Already Have a /docs/ Directory","text":"<p>No need to run mkdocs new .. Just ensure your folder layout follows MkDocs structure:</p> <pre><code># Create the required folder structure inside the /docs directory\nmkdir -p docs/infrastructure docs/services/pihole docs/monitoring docs/guides\n\n# Move Proxmox or infrastructure-related markdown files into the correct folder\nmv infrastructure/*.md docs/infrastructure/ 2&gt;/dev/null\n\n# Move Pi-hole-related markdown files into the services/pihole directory\nmv services/pihole/*.md docs/services/pihole/ 2&gt;/dev/null\n\n# Move Grafana or other monitoring-related markdown files\nmv monitoring/*.md docs/monitoring/ 2&gt;/dev/null\n\n# Move general guide markdown files into the guides folder\nmv guides/*.md docs/guides/ 2&gt;/dev/null\n\n# Use the main README as the homepage of your MkDocs site\nmv README.md docs/index.md\n</code></pre>"},{"location":"guides/mkdocs_deploy_guide/#b-if-youre-starting-from-scratch","title":"B) If You're Starting from Scratch","text":"<p>Use <code>mkdocs new .</code> to initialize a new project structure:</p> <p><pre><code>mkdocs new .\n</code></pre> This creates:</p> <pre><code>mkdocs.yml        # Site configuration\ndocs/\n\u2514\u2500\u2500 index.md      # Default homepage\n</code></pre> <p>You can then add your custom folders like:</p> <p><pre><code>mkdir -p docs/infrastructure docs/services/pihole docs/monitoring docs/guides\n</code></pre> And move your markdown files accordingly.</p>"},{"location":"guides/mkdocs_deploy_guide/#step-4-configure-the-material-theme","title":"Step 4: Configure the Material Theme","text":"<p>Edit <code>mkdocs.yml</code>:</p> <pre><code>site_name: Homelab Docs\nsite_url: http://192.168.1.2:8000\ntheme:\n  name: material\n\nnav:\n  - Home: index.md\n  - Infrastructure:\n      - Proxmox Setup: infrastructure/proxmox_setup.md\n  - Services:\n      - Pi-hole: services/pihole/config_notes.md\n  - Monitoring:\n      - Grafana Setup: monitoring/grafana_setup.md\n</code></pre>"},{"location":"guides/mkdocs_deploy_guide/#step-5-preview-the-site-locally","title":"Step 5: Preview the Site Locally","text":"<p>Start the live server:</p> <pre><code>mkdocs serve\n</code></pre> <p>Then open in your browser: <pre><code>http://192.168.1.2:8000\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#step-6-deploy-to-github-pages","title":"Step 6: Deploy to GitHub Pages","text":""},{"location":"guides/mkdocs_deploy_guide/#61-install-the-github-deploy-plugin","title":"6.1 Install the GitHub deploy plugin","text":"<p>In your virtual environment: <pre><code>pip3 install mkdocs-material[gh-deploy]\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#62-deploy-the-site","title":"6.2 Deploy the site","text":"<p>Build and push your documentation to the gh-pages branch of your GitHub repo: <pre><code>mkdocs gh-deploy\n</code></pre></p> <p>When prompted for GitHub credentials:</p> <p>Username: your GitHub username (e.g., tylerwkoontz)</p> <p>Password: use a Personal Access Token (PAT) instead of your actual password.</p> <p>\u2757 GitHub no longer supports password authentication for Git over HTTPS. You must use a Personal Access Token (PAT) with at least the repo or public_repo scope enabled.</p>"},{"location":"guides/mkdocs_deploy_guide/#63-optional-cache-your-github-credentials","title":"6.3 (Optional) Cache your GitHub credentials","text":"<p>To avoid re-entering your PAT every time:</p> <pre><code>git config --global credential.helper store\n# This saves your credentials in plaintext at ~/.git-credentials. Only use this on secure, personal systems.\n</code></pre>"},{"location":"guides/mkdocs_deploy_guide/#step-7-enable-github-pages","title":"Step 7: Enable GitHub Pages","text":"<ol> <li>Go to your repo on GitHub: <code>https://github.com/&lt;username&gt;/homelab-docs</code></li> <li>Navigate to: Settings \u2192 Pages</li> <li>Under Source, choose:</li> <li>Branch: <code>gh-pages</code></li> <li>Folder: <code>/ (root)</code></li> <li>Click Save</li> </ol> <p>Your site will be live at: <pre><code>https://&lt;username&gt;.github.io/homelab-docs/\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#step-8-workflow-for-updating-docs","title":"Step 8: Workflow for Updating Docs","text":"<p>Here's how to maintain and update your site:</p>"},{"location":"guides/mkdocs_deploy_guide/#1-edit-locally-with-live-preview","title":"1. Edit Locally with Live Preview","text":"<p>Use MkDocs' live server to see changes in real-time: <pre><code>mkdocs serve\n</code></pre> View locally at http://192.168.1.2:8000</p>"},{"location":"guides/mkdocs_deploy_guide/#2-save-and-push-changes-to-github","title":"2. Save and Push Changes to GitHub","text":"<p>After editing markdown files or the config: <pre><code>git add .\ngit commit -m \"Update docs or config\"\ngit push\n# This saves your edits to GitHub but does not publish them yet.\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#3-deploy-to-github-pages","title":"3. Deploy to GitHub Pages","text":"<p>When you're ready to update your live site: <pre><code>mkdocs gh-deploy\n# This builds your static site and pushes it to the gh-pages branch.\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#optional-enhancements","title":"Optional Enhancements","text":"<p>Take your MkDocs site to the next level with these enhancements:</p>"},{"location":"guides/mkdocs_deploy_guide/#full-text-search-built-in","title":"Full-Text Search (Built-In)","text":"<p>No setup required \u2014 Material for MkDocs includes a client-side search engine by default.</p> <p>What it does: - Instantly searches page titles and content - Provides dropdown suggestions as you type - Works offline \u2014 no external dependencies</p>"},{"location":"guides/mkdocs_deploy_guide/#custom-logo-and-favicon","title":"Custom Logo and Favicon","text":"<p>Customize your site branding: <pre><code>theme:\n  name: material\n  logo: images/logo.png         # Appears in the upper-left corner\n  favicon: images/favicon.ico   # Appears in browser tab\n</code></pre> What it does: - Gives your docs a personalized and professional look - Reinforces branding, especially if used for public or client-facing projects</p> <p>Place the image files in: <pre><code>docs/images/logo.png\ndocs/images/favicon.ico\n</code></pre></p>"},{"location":"guides/mkdocs_deploy_guide/#structure-long-pages-with-headings","title":"Structure Long Pages with Headings","text":"<p>Use markdown headers to divide content: <pre><code># H1 - Top-level title\n## H2 - Section\n### H3 - Subsection\n</code></pre> What it does: - Creates an auto-generated sidebar TOC (Table of Contents) - Improves readability and navigation - Helps readers scan content quickly</p>"},{"location":"guides/mkdocs_deploy_guide/#use-checklists-for-task-tracking","title":"Use Checklists for Task Tracking","text":"<p>Use GitHub-style task lists:</p> <p><pre><code>- [x] Install MkDocs\n- [ ] Configure theme\n- [ ] Write documentation\n</code></pre> What it does: - Makes setup or troubleshooting guides interactive - Can serve as live checklists for system setup, deployments, etc.</p>"},{"location":"guides/mkdocs_deploy_guide/#use-tables-for-data-presentation","title":"Use Tables for Data Presentation","text":"<p>Organize comparisons or structured info:</p> <pre><code>| Feature       | Enabled | Notes                     |\n|---------------|---------|---------------------------|\n| Snapshots     | \u2705       | ZFS hourly, daily, weekly |\n| Monitoring    | \u274c       | Grafana setup pending     |\n</code></pre> <p>What it does: - Makes dense information easier to scan - Adds clarity to service lists, features, or status reports</p>"},{"location":"guides/mkdocs_deploy_guide/#enable-dark-mode-toggle","title":"Enable Dark Mode Toggle","text":"<p>Material supports built-in light/dark theme switching: <pre><code>theme:\n  name: material\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      primary: indigo\n      accent: indigo\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      primary: indigo\n      accent: indigo\n</code></pre> What it does: - Automatically adapts to system dark/light mode - Adds a toggle button to the header</p>"},{"location":"guides/mkdocs_deploy_guide/#add-a-custom-404-page","title":"Add a Custom 404 Page","text":"<p>Create a helpful error page: <pre><code>touch docs/404.md\n</code></pre> What it does: - Improves user experience when a page is missing - Prevents confusion or dead ends in navigation</p>"},{"location":"guides/mkdocs_deploy_guide/#add-plugins-advanced","title":"Add Plugins (Advanced)","text":"<p>Extend MkDocs with features like:</p> <p><code>mkdocs-awesome-pages-plugin:</code> Custom sort nav order</p> <p><code>mkdocs-git-revision-date-localized-plugin:</code> Show last updated timestamp</p> <p><code>mkdocs-minify-plugin:</code> Reduce page size for faster loads</p> <p>What they do: Enhance control, performance, and versioning in large documentation sets.</p>"},{"location":"guides/mkdocs_deploy_guide/#summary","title":"Summary","text":"Task Command Install MkDocs <code>pip3 install mkdocs mkdocs-material</code> Clone repo <code>git clone https://github.com/Tylerwkoontz/homelab-docs.git</code> Create project <code>mkdocs new .</code> or manually organize Preview locally <code>mkdocs serve</code> Deploy <code>mkdocs gh-deploy</code> Live site <code>https://&lt;username&gt;.github.io/homelab-docs/</code>"},{"location":"guides/mkdocs_workflow_guide/","title":"MkDocs Documentation Workflow (pve1 + GitHub Pages)","text":"<p>This guide explains the full workflow for editing, previewing, and publishing MkDocs-based documentation site from pve1 (homelab server) using GitHub for version control and hosting.</p>"},{"location":"guides/mkdocs_workflow_guide/#file-location","title":"File Location","text":"<p>This file belongs in the repo:</p> <pre><code>homelab-docs/\n\u2514\u2500\u2500 docs/\n    \u2514\u2500\u2500 guides/\n        \u2514\u2500\u2500 mkdocs_workflow_guide.md\n</code></pre>"},{"location":"guides/mkdocs_workflow_guide/#prerequisites","title":"Prerequisites","text":"<p>MkDocs and Material installed in a Python virtual environment (~/venvs/mkdocs) - Your GitHub repo cloned at: ~/Projects/homelab-docs - You can SSH into pve1 or access it via VS Code Remote SSH - GitHub Pages is enabled on your repo (gh-pages branch)</p>"},{"location":"guides/mkdocs_workflow_guide/#recommended-workflow","title":"Recommended Workflow","text":""},{"location":"guides/mkdocs_workflow_guide/#1-ssh-into-pve1","title":"1. SSH into pve1","text":"<p>From Mac/PC terminal:</p> <p><pre><code>ssh user@192.168.1.2\n</code></pre> Or open VS Code \u2192 Remote SSH \u2192 user@192.168.1.2 </p>"},{"location":"guides/mkdocs_workflow_guide/#2-activate-the-virtual-environment","title":"2. Activate the Virtual Environment","text":"<p>In the pve1 terminal:</p> <p><pre><code>source ~/venvs/mkdocs/bin/activate\n</code></pre> Your prompt should change to <code>(mkdocs) user@pve1:~$</code></p>"},{"location":"guides/mkdocs_workflow_guide/#3-navigate-to-your-repo","title":"3. Navigate to Your Repo","text":"<pre><code>cd ~/Projects/homelab-docs\n</code></pre>"},{"location":"guides/mkdocs_workflow_guide/#4-edit-markdown-docs","title":"4. Edit Markdown Docs","text":"<p>Use VS Code or terminal editors (like nano, vim) to update .md files inside:</p> <pre><code>docs/\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 infrastructure/\n\u251c\u2500\u2500 services/\n\u251c\u2500\u2500 monitoring/\n\u2514\u2500\u2500 guides/\n</code></pre>"},{"location":"guides/mkdocs_workflow_guide/#5-preview-site-locally-optional","title":"5. Preview Site Locally (Optional)","text":"<p>Use MkDocs\u2019 live server:</p> <pre><code>mkdocs serve\n</code></pre> <p>View the site at: http://192.168.1.2:8000</p> <p>Warning</p> <p>Your terminal will be locked while serving. Use a new tab to keep editing, or Ctrl+C to stop it.</p>"},{"location":"guides/mkdocs_workflow_guide/#6-save-and-commit-changes-to-git","title":"6. Save and Commit Changes to Git","text":"<p>After editing content:</p> <pre><code>git add .\ngit commit -m \"Update docs: brief summary of what changed\"\ngit push origin main\n# This updates your GitHub repo but does not update the live site yet.\n</code></pre>"},{"location":"guides/mkdocs_workflow_guide/#7-deploy-to-github-pages","title":"7. Deploy to GitHub Pages","text":"<p>Run:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>This will: - Build the static site - Push it to the gh-pages branch - Update your public site at <code>https://username.github.io/homelab-docs/</code></p>"},{"location":"guides/mkdocs_workflow_guide/#summary","title":"Summary","text":"<ul> <li>Enter virtual env: <code>source ~/venvs/mkdocs/bin/activate</code></li> <li>Navigate to repo: <code>cd ~/Projects/homelab-docs</code></li> <li>Preview site: <code>mkdocs serve</code></li> <li>Commit changes: <code>git add . &amp;&amp; git commit -m \"...\" &amp;&amp; git push origin main</code></li> <li>Deploy site: <code>mkdocs gh-deploy</code></li> <li>View live <code>https://username.github.io/homelab-docs/</code></li> </ul>"},{"location":"infrastructure/cisco2960_setup/","title":"Cisco 2960 Homelab Switch Setup + IOS Upgrade (LAN Base with SSH)","text":""},{"location":"infrastructure/cisco2960_setup/#switch-model","title":"Switch Model","text":"<ul> <li>Device: Cisco Catalyst 2960 Plus Series (SI)</li> <li>Original IOS: <code>c2960-lanlitek9-mz.152-2.E5.bin</code> (LAN Lite \u2014 no SSH support)</li> <li>Target IOS: <code>c2960-lanbasek9-mz.152-7.E12.bin</code> (LAN Base \u2014 crypto/SSH support)</li> </ul>"},{"location":"infrastructure/cisco2960_setup/#final-switch-configuration","title":"Final Switch Configuration","text":""},{"location":"infrastructure/cisco2960_setup/#user-ssh-access","title":"User + SSH Access","text":"<pre><code>hostname HomelabSwitch\n!\nenable secret YourEnableSecret123\nusername admin privilege 15 secret YourSecurePass123\n!\nip domain-name tkcloudstack\ncrypto key generate rsa\n! (Choose 1024 bits)\nip ssh version 2\n!\nline vty 0 4\nlogin local\ntransport input ssh\n!\nline con 0\nlogin local\n!\nno ip http server\nno ip http secure-server\n!\ninterface vlan 1\n ip address 192.168.1.10 255.255.255.0\n no shutdown\n!\nip default-gateway 192.168.1.1\n!\ninterface range fa0/1 - 24\n no shutdown\n!\nwrite memory\n</code></pre>"},{"location":"infrastructure/cisco2960_setup/#ios-upgrade-process-summary","title":"\ud83d\ude80 IOS Upgrade Process Summary","text":""},{"location":"infrastructure/cisco2960_setup/#1-download-new-ios","title":"1. \u2705 Download New IOS","text":"<ul> <li>File used: <code>c2960-lanbasek9-mz.152-7.E12.bin</code></li> <li>Placed in: <code>/private/tftpboot/</code> on macOS</li> </ul>"},{"location":"infrastructure/cisco2960_setup/#2-start-macos-tftp-server","title":"2. \ud83d\udee0 Start macOS TFTP Server","text":"<pre><code>sudo mkdir -p /private/tftpboot\nsudo chmod 777 /private/tftpboot\nsudo cp ~/Downloads/c2960-lanbasek9-mz.152-7.E12.bin /private/tftpboot/\nsudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist\n</code></pre>"},{"location":"infrastructure/cisco2960_setup/#3-assign-ip-to-switch-enable-ports","title":"3. \ud83d\udce1 Assign IP to Switch + Enable Ports","text":"<pre><code>interface vlan 1\n ip address 192.168.1.10 255.255.255.0\n no shutdown\nexit\n\ninterface range fa0/1 - 24\n no shutdown\nexit\n\nip default-gateway 192.168.1.1\n</code></pre>"},{"location":"infrastructure/cisco2960_setup/#4-transfer-ios-from-mac-to-switch","title":"4. \ud83d\udce4 Transfer IOS from Mac to Switch","text":"<pre><code>copy tftp: flash:\n</code></pre> <ul> <li>Remote host: <code>192.168.1.51</code> (Mac IP)</li> <li>Source filename: <code>c2960-lanbasek9-mz.152-7.E12.bin</code></li> </ul>"},{"location":"infrastructure/cisco2960_setup/#5-set-boot-image","title":"5. \ud83e\udded Set Boot Image","text":"<pre><code>configure terminal\nboot system flash:c2960-lanbasek9-mz.152-7.E12.bin\nexit\nwrite memory\n</code></pre>"},{"location":"infrastructure/cisco2960_setup/#6-reload-and-verify","title":"6. \ud83d\udd04 Reload and Verify","text":"<pre><code>reload\nshow version\nshow ip ssh\n</code></pre>"},{"location":"infrastructure/cisco2960_setup/#post-upgrade-status","title":"\u2705 Post-Upgrade Status","text":"<ul> <li>SSH v2 supported and enabled</li> <li>Console + VTY login secured</li> <li>Switch reachable at <code>192.168.1.10</code></li> <li>VLAN 1 used for management</li> <li>Mac-based TFTP workflow confirmed functional</li> </ul> <p>Let me know if you'd like a Markdown version or PDF export format for your repo/docs!</p>"},{"location":"infrastructure/proxmox_setup/","title":"Proxmox Setup &amp; ZFS RAID Configuration","text":""},{"location":"infrastructure/proxmox_setup/#overview","title":"Overview","text":"<p>This document outlines the installation and configuration of <code>pve1</code>, the primary Proxmox node in my homelab. It includes the setup of Proxmox VE 8.4.1 using a macOS-flashed USB, configuration of the Dell H730 Mini controller in HBA (IT) mode, and the deployment of a ZFS mirror (RAID 1) across two 2TB SAS drives. ZFS automatic snapshots have been enabled to provide versioned backups and rollback points.</p> <p>This setup prioritizes data integrity, service reliability, and future scalability. All steps are documented to ensure clarity.</p>"},{"location":"infrastructure/proxmox_setup/#system-summary","title":"System Summary","text":"<ul> <li>Node: pve1</li> <li>Hardware: Dell PowerEdge R430</li> <li>Drives: 2 \u00d7 2TB SAS</li> <li>Proxmox Version: 8.4.1</li> <li>Storage Type: ZFS Mirror (RAID 1)</li> </ul>"},{"location":"infrastructure/proxmox_setup/#step-by-step-installation","title":"Step-by-Step Installation","text":""},{"location":"infrastructure/proxmox_setup/#1-flash-proxmox-iso-to-usb","title":"1. Flash Proxmox ISO to USB","text":"<p>Used macOS terminal tools instead of GUI software: <pre><code># Convert the ISO to a raw disk image format (.dmg) suitable for writing to USB\nhdiutil convert -format UDRW -o proxmox-ve_8.4-1.dmg ~/Downloads/proxmox-ve_8.4-1.iso\n\n# List all disks to identify the USB drive (e.g., /dev/disk2)\ndiskutil list\n\n# Unmount the USB drive so it can be written to directly\ndiskutil unmountDisk /dev/disk2\n\n# Write the .dmg image to the USB drive using raw access (note the 'r' in rdisk2 for faster write)\nsudo dd if=proxmox-ve_8.4-1.dmg of=/dev/rdisk2 bs=1m\n</code></pre> Why: Using the macOS CLI gives more control over the flashing process, avoids GUI tools, and allows installing Proxmox directly from a clean bootable USB. Writing the ISO to USB ensures the OS lives on its own device, keeping the primary drives available for dedicated ZFS storage.</p>"},{"location":"infrastructure/proxmox_setup/#2-configure-bios-and-storage-controller","title":"2. Configure BIOS and Storage Controller","text":"<ul> <li>Set USB as the primary boot device to ensure the Proxmox installer loads first.</li> <li>Configured the H730 Mini RAID controller into HBA (IT) mode to allow ZFS direct access to raw disks.</li> <li>Verified both 2TB drives were exposed individually (non-RAID) to the Proxmox installer.</li> </ul> <p>Why: ZFS requires direct access to physical disks for redundancy and integrity features. HBA mode bypasses the RAID logic, making the drives visible as raw block devices to the OS without removing the controller.</p>"},{"location":"infrastructure/proxmox_setup/#zfs-raid-1-setup","title":"ZFS RAID 1 Setup","text":""},{"location":"infrastructure/proxmox_setup/#1-created-zfs-mirror-pool","title":"1. Created ZFS Mirror Pool","text":"<p>Used the Proxmox web UI during installation: - Selected ZFS RAID 1 (mirror) using <code>/dev/sda</code> and <code>/dev/sdb</code> - Accepted the default pool name: <code>rpool</code></p> <p>ZFS provides: - Built-in redundancy via mirroring (RAID 1) - Data integrity through checksumming and self-healing - Efficient snapshots for backups and rollback - SMART integration to monitor drive health and predict failure (<code>zpool status</code> and <code>smartctl</code> both supported natively)</p> <p>Note to self (future plan): Once the remaining 6 drives are installed, plan to: - Expand to a RAID-Z2 or multiple mirror vdevs - Create a separate storage pool for high-capacity or tiered storage use - Consider setting up ZFS alerts and monitoring via Grafana or Prometheus</p>"},{"location":"infrastructure/proxmox_setup/#zfs-automatic-snapshots","title":"ZFS Automatic Snapshots","text":""},{"location":"infrastructure/proxmox_setup/#tool-used","title":"Tool Used","text":"<p>Installed <code>zfs-auto-snapshot</code>, which adds automated, scheduled snapshots using system cron jobs. <pre><code>apt update\napt install zfs-auto-snapshot -y\n</code></pre></p>"},{"location":"infrastructure/proxmox_setup/#default-retention-policy","title":"Default Retention Policy","text":"<p>Once installed, snapshots are created and rotated automatically: - Hourly: 24 retained - Daily: 7 retained - Weekly: 4 retained - Monthly: 12 retained</p> <p>Snapshots are stored within the same dataset and do not consume extra space unless data changes (copy-on-write).</p> <p>Verify Snapshots To view existing snapshots: <pre><code>zfs list -t snapshot\n</code></pre> Why It Matters - Provides automatic rollback points for VMs and datasets - Enables rapid recovery from misconfiguration, corruption, or deletion - Integrates with ZFS-native features like rollback and replication - Supports SMART-based storage and future offsite backup plans</p> <p>Note to Self - Plan to integrate snapshot monitoring with Grafana or Prometheus - Future: Automate off-node snapshot syncing for cold storage redundancy</p> <p>Optional: Exclude specific datasets with: <pre><code>zfs set com.sun:auto-snapshot=false rpool/data/iso-store\n</code></pre></p>"},{"location":"infrastructure/proxmox_setup/#notes","title":"Notes","text":"<ul> <li>Proxmox 8.4.1 was installed via a bootable USB created using macOS CLI tools (<code>dd</code>, <code>hdiutil</code>) for maximum control and precision.</li> <li>The Dell H730 Mini controller was left installed but switched to HBA (IT) mode, allowing Proxmox/ZFS direct access to raw disks.</li> <li>No hardware RAID is used \u2014 ZFS software RAID 1 (mirror) provides redundancy, integrity checking, and snapshot capability.</li> <li>Automatic snapshots (<code>zfs-auto-snapshot</code>) are scheduled hourly, daily, weekly, and monthly using cron, enabling lightweight rollback and recovery.</li> <li>SMART monitoring is natively supported in ZFS; future plans include logging and alerting via Grafana/Prometheus stack.</li> <li>ZFS snapshots are copy-on-write and live within the same datasets, requiring minimal space unless data changes.</li> <li>All configurations were documented from the beginning to ensure traceability, reproducibility, and showcase-level professionalism.</li> <li>Plans to expand storage to RAID-Z2 or multiple vdev mirrors with six additional drives for higher capacity and resilience.</li> <li>Future snapshot syncing and backup strategy will include off-node replication or cold storage, improving disaster recovery posture.</li> </ul>"},{"location":"monitoring/grafana_setup/","title":"Grafana Monitoring Setup","text":"<p>Status: \ud83d\udea7 This section is currently under construction.</p> <p>This page will document the setup and configuration of Grafana in my homelab. It will include:</p> <ul> <li>How Grafana connects to data sources (e.g., InfluxDB, Pi-hole, Uptime Kuma)</li> <li>Dashboards for system metrics, network performance, DNS logs</li> <li>Deployment method (Docker Compose, LXC, etc.)</li> <li>Access control and reverse proxy setup (e.g., Nginx + Auth)</li> </ul>"},{"location":"monitoring/grafana_setup/#whats-planned","title":"What\u2019s Planned","text":"<ul> <li> Install Grafana in Docker or LXC</li> <li> Connect to Prometheus or Uptime Kuma</li> <li> Create custom dashboards for ZFS, Proxmox, and DNS</li> <li> Secure admin interface with login + HTTPS</li> <li> Integrate with MkDocs site for visual previews</li> </ul> <p>Note to Self: This page is stubbed to maintain project structure and signal future documentation goals.</p> <p>Return to Monitoring Overview</p>"},{"location":"services/pihole/config_notes/","title":"Pi-hole Configuration Notes","text":"<p>This document outlines the rationale, setup process, and configuration details of the Pi-hole DNS filtering service running in my homelab.</p> <p>Detailed installation steps in Proxmox</p>"},{"location":"services/pihole/config_notes/#overview","title":"Overview","text":"<p>Pi-hole is a network-level ad blocker that intercepts DNS queries and blocks known ad/tracking domains before they reach client devices.</p>"},{"location":"services/pihole/config_notes/#why-i-use-it","title":"Why I Use It","text":"<ul> <li>Reduces ads and tracking across all devices</li> <li>Improves page load times</li> <li>Helps monitor network-level DNS activity</li> <li>Protects against malicious domains</li> </ul>"},{"location":"services/pihole/config_notes/#deployment-details","title":"Deployment Details","text":"Component Value Host <code>pve1</code> Container LXC (Unprivileged, Nesting) OS Template Debian 12 (Turnkey) IP Address <code>192.168.1.4</code> (static) Pi-hole Version Installed via official curl script Web UI Port <code>80</code>"},{"location":"services/pihole/config_notes/#install-process-inside-lxc","title":"Install Process (Inside LXC)","text":"<p><pre><code>apt update &amp;&amp; apt upgrade -y\ncurl -sSL https://install.pi-hole.net | bash\n</code></pre> During install: - Selected upstream DNS provider (Cloudflare) - Set static IP manually (192.168.79.10) - Enabled web admin interface - Default blocklists were applied (for now)</p>"},{"location":"services/pihole/config_notes/#admin-interface","title":"Admin Interface","text":"<p>Access via: http://192.168.1.2/admin</p> <p>Set password: <pre><code>pihole -a -p\n</code></pre></p>"},{"location":"services/pihole/config_notes/#dns-configuration","title":"DNS Configuration","text":"<p>Router-Level: - DHCP DNS server points to Pi-hole's IP - IPv6 filtering disabled (for now)</p> <p>Client-Level (fallback): - Some devices manually configured to use Pi-hole as DNS resolver</p>"},{"location":"services/pihole/config_notes/#monitoring-logs","title":"Monitoring &amp; Logs","text":"<ul> <li>Query log available in web UI</li> <li>Block/allow domains via dashboard</li> <li>Consider future integration with Grafana/InfluxDB for visual DNS monitoring</li> </ul>"},{"location":"services/pihole/config_notes/#why-lxc-instead-of-docker","title":"Why LXC Instead of Docker?","text":"<ul> <li>Easier networking setup on Proxmox</li> <li>Lower overhead than full VM</li> <li>Better integration with snapshotting and backup via Proxmox GUI</li> </ul>"},{"location":"services/pihole/config_notes/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Replace or test with AdGuard Home</li> <li>Add fail2ban for admin UI brute-force protection</li> <li>Schedule regular Pi-hole config backups</li> <li>Expose via Tailscale or reverse proxy with Auth if remote access needed</li> </ul>"},{"location":"services/pihole/proxmox_pihole_setup/","title":"Proxmox Pi-hole Setup (LXC) \u2013 With Explanations","text":"<p>Back to Pi-hole overview and rationale</p>"},{"location":"services/pihole/proxmox_pihole_setup/#1-download-a-base-lxc-template","title":"1. Download a Base LXC Template","text":"<p>Proxmox Web UI \u2192 <code>pve1</code> \u2192 <code>local</code> \u2192 CT Templates \u2192 Templates \u2192 Download Debian 12 or Ubuntu 22.04</p> <p>Why: - Minimal, stable, widely supported. - Debian is Pi-hole recommended. - Needed to create containers.</p>"},{"location":"services/pihole/proxmox_pihole_setup/#2-create-an-lxc-container","title":"2. Create an LXC Container","text":"<p>In the Proxmox Web UI:</p> <ul> <li>Unprivileged Container: \u2705 Checked Why: Improves security by isolating container root from host root.</li> <li>Features &gt; Nesting: \u2705 Checked Why: Needed for systemd and services like dnsmasq.</li> <li>Disk Size: 4\u20138GB (ZFS-backed)</li> <li>CPU / RAM: 1 vCPU, 512MB\u20131GB RAM</li> <li>Network: DHCP (we'll set static IP later)</li> <li>Container Name: <code>pihole</code></li> </ul>"},{"location":"services/pihole/proxmox_pihole_setup/#3-set-static-ip-recommended","title":"3. Set Static IP (Recommended)","text":"<p>Access console:</p> <pre><code>pct console 100  # Replace 100 with your CT ID\n</code></pre> <p>Edit interfaces (Debian example):</p> <pre><code>nano /etc/network/interfaces\n</code></pre> <pre><code>auto eth0\niface eth0 inet static\n  address 192.168.79.10\n  netmask 255.255.255.0\n  gateway 192.168.79.1\n  dns-nameservers 1.1.1.1 8.8.8.8\n</code></pre> <pre><code>reboot\n</code></pre> <p>Why: Avoids DNS failure if Pi-hole\u2019s IP changes.</p>"},{"location":"services/pihole/proxmox_pihole_setup/#4-install-pi-hole","title":"4. Install Pi-hole","text":"<p>SSH in or use <code>pct exec</code>:</p> <pre><code>apt update &amp;&amp; apt upgrade -y\napt install curl -y\ncurl -sSL https://install.pi-hole.net | bash\n</code></pre> <p>Follow prompts: - Choose static IP - Choose DNS provider - Enable blocklists - Enable web interface and lighttpd</p>"},{"location":"services/pihole/proxmox_pihole_setup/#5-set-web-ui-password","title":"5. Set Web UI Password","text":"<pre><code>pihole -a -p\n</code></pre>"},{"location":"services/pihole/proxmox_pihole_setup/#6-access-web-interface","title":"6. Access Web Interface","text":"<p>Visit: <pre><code>http://&lt;container-ip&gt;/admin\n</code></pre></p> <p>Login with the password you set.</p>"},{"location":"services/pihole/proxmox_pihole_setup/#7-configure-router-to-use-pi-hole","title":"7. Configure Router to Use Pi-hole","text":""},{"location":"services/pihole/proxmox_pihole_setup/#option-a-dhcp-dns","title":"Option A \u2013 DHCP DNS:","text":"<ul> <li>Set LAN DNS to <code>192.168.79.10</code></li> </ul>"},{"location":"services/pihole/proxmox_pihole_setup/#option-b-static-dns-per-device","title":"Option B \u2013 Static DNS per device","text":"<p>Why: This routes all network DNS through Pi-hole.</p>"},{"location":"services/pihole/proxmox_pihole_setup/#8-secure-and-harden","title":"8. Secure and Harden","text":"<pre><code>apt install unattended-upgrades -y\n</code></pre> <p>Add blocklists, optionally: - Back up <code>/etc/pihole/</code> - Consider <code>PiVPN</code> if remote access is needed</p>"},{"location":"services/pihole/proxmox_pihole_setup/#9-add-fail2ban-optional","title":"9. Add Fail2Ban (Optional)","text":"<pre><code>apt install fail2ban -y\n</code></pre>"},{"location":"services/pihole/proxmox_pihole_setup/#10-test-pi-hole","title":"10. Test Pi-hole","text":"<pre><code>nslookup google.com 192.168.79.10\n</code></pre> <p>Should reply from Pi-hole.</p>"},{"location":"services/pihole/proxmox_pihole_setup/#summary-table","title":"\ud83d\udccb Summary Table","text":"Step What You Do Why You Do It 1 Download Template Base image needed 2 Create LXC Lightweight, secure 3 Assign Static IP DNS reliability 4 Install Pi-hole Setup DNS blocker 5 Set Password Secures web UI 6 Configure Router Routes traffic 7 Harden System Keeps it updated 8 Enable Fail2Ban Adds login protection 9 Test Verifies it works"}]}